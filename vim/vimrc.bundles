" --> Vundle plugin
Plugin 'gmarik/Vundle.vim'


" --> Themes and views
" molokai colorscheme
Plugin 'tomasr/molokai'

" --> smooth scroll
Plugin 'terryma/vim-smooth-scroll'
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<cr>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 14, 2)<cr>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 22, 4)<cr>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 24, 4)<cr>

" --> shows
" 自动补全引号, 括号等
" Plugin 'Raimondi/delimitMate'
" a more conservative version of auto-pairs that only works when you press Enter
" Plugin 'rstacruz/vim-closer'
" 另一个补全括号插件
Plugin 'jiangmiao/auto-pairs'
" Fly Mode will always force closed-pair jumping instead of inserting. only for ")", "}", "]"
let g:AutoPairsFlyMode = 0

Plugin 'Yggdroot/indentLine'
let g:indentLine_char = '¦'
" A Vim plugin for visually displaying indent levels in code
" Plugin 'nathanaelkane/vim-indent-guides'

Plugin 'ntpeters/vim-better-whitespace'
map <leader><space> :StripWhitespace<cr>

" trailingspace plugins {{{
" Plugin 'vim-scripts/CountJump'
" Plugin 'vim-scripts/ShowTrailingWhitespace'
" Plugin 'vim-scripts/JumpToTrailingWhitespace'
" Plugin 'vim-scripts/DeleteTrailingWhitespace'
" }}}

Plugin 'bling/vim-airline'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'
" 显示状态栏 (默认值为 1, 无法显示状态栏)
" 命令行（在状态行下）的高度，默认为1，这里是2
set laststatus=2
" 设置在状态行显示的信息（包括文件类型和解码）
" buffer编号 | 文件路径及文件名 | modified状态 | 只读状态 | help | preview | 文件编码 | BOM | EOL | type | demical:hexadecimal | 列:行/总行 | 文件百分比 | 时 间
" set statusline=[%n]\ %F%m%r%h%w\ [%{&ff}]\ [%{(&fenc==\"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]%{&eol?'':'\ [noeol]'}\ [TYPE=%Y]\ [\%03.3b:0x\%02.2B]\ [POS=%c:%l/%L][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" --> Langulage support
" vim-markdown {{{
" 自动对齐
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1
" }}}
Plugin 'leafgarland/typescript-vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'groenewege/vim-less'
Plugin 'smilekzs/vim-nfo'
Plugin 'evanmiller/nginx-vim-syntax'

Plugin 'kien/rainbow_parentheses.vim'
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

Plugin 'vim-scripts/matchit.zip'

Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
" disable auto fold when filetype javascript
" autocmd FileType javascript call JavaScriptFold()

" Write styles faster. Much faster.
" Plugin 'rstacruz/vim-hyperstyle'

" ap/vim-css-color # 不支持Vim74， 使用vim-colorsque 替代
Plugin 'Marslo/vim-coloresque'
" {{{{ emmet
Plugin 'mattn/emmet-vim'
let g:user_emmet_mode='i'  "enable all functions
" Enable just for html/css
let g:user_emmet_install_global = 0
" remap the default <C-Y> leader
" Note that the trailing , still needs to be entered
" so the new keymap would be `<C-Y>,`
let g:user_emmet_leader_key='<C-Y>'
autocmd FileType html,css EmmetInstall
" }}}

Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

" --> Git support
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

Plugin 'kshenoy/vim-signature'
" mx           Toggle mark 'x' and display it in the leftmost column
" dmx          Remove mark 'x' where x is a-zA-Z
" m,           Place the next available mark
" m.           If no mark on line, place the next available mark. Otherwise, remove (first) existing mark.
" m-           Delete all marks from the current line
" m<Space>     Delete all marks from the current buffer
" ]`           Jump to next mark
" [`           Jump to prev mark
" ]'           Jump to start of next line containing a mark
" ['           Jump to start of prev line containing a mark
" `]           Jump by alphabetical order to next mark
" `[           Jump by alphabetical order to prev mark
" ']           Jump by alphabetical order to start of next line having a mark
" '[           Jump by alphabetical order to start of prev line having a mark
" m/           Open location list and display marks from current buffer
" m[0-9]       Toggle the corresponding marker !@#$%^&*()
" m<S-[0-9]>   Remove all markers of the same type
" ]-           Jump to next line having a marker of the same type
" [-           Jump to prev line having a marker of the same type
" ]=           Jump to next line having a marker of any type
" [=           Jump to prev line having a marker of any type
" m?           Open location list and display markers from current buffer
" m<BS>        Remove all markers

" --> 快速搜索插件
" Plugin 'mileszs/ack.vim'
" Plugin 'rking/ag.vim' " install `ag` a.k.a `the_silver_searcher`
" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
Plugin 'dyng/ctrlsf.vim'
let g:ctrlsf_winsize='30%'
let g:ctrlsf_auto_close=0
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
" In CtrlSF window:
" Enter - Open corresponding file of current line in the window which CtrlSF is launched from.
" t - Like Enter but open file in a new tab.
" p - Like Enter but open file in a preview window.
" O - Like Enter but always leave CtrlSF window opening.
" T - Lkie t but focus CtrlSF window instead of new opened tab.
" q - Quit CtrlSF window.
" <C-J> - Move cursor to next match.
" <C-K> - Move cursor to previous match.
" In preview window:
" q - Close preview window.

" {{{ NERDTree插件的快捷键
Plugin 'scrooloose/nerdtree'
" o.......打开文件目录或书签
" t.......在新的tab页中打开文件或书签
" i.......在split window中打开选择的文件
" s.......在vsplit window中打开选择的文件
" O.......Recursively open the selected directory
" x.......Close the current nodes parent
" X.......Recursively close all children of the current node
" e.......Edit the current dir
" D.......删除当前书签
" P.......返回根节点
" p.......返回当前节点父节点
" C.......进入相应目录
" u.......返回上一级目录
" cd......Change the CWD to the dir of the selected node
" CD......Change tree root to the CWD
" I.......切换隐藏文件是否显示
" B.......切换书签隐藏显示
"nmap <leader>nt :NERDTreeToggle<CR>
" }}}
" {{{ NERDTreeTabsToggle
Plugin 'jistr/vim-nerdtree-tabs'
"始终焦点位于文件窗口内
let g:nerdtree_tabs_smart_startup_focus=2
"默认不显示NERDTree窗口
let g:nerdtree_tabs_open_on_gui_startup=0
nmap <leader>nt :NERDTreeTabsToggle<CR>
" }}}

" {{{ plugin – NERD_commenter.vim   注释代码用的
Plugin 'scrooloose/nerdcommenter'
"[count]<leader>cc 注释当前行或光标以下count行逐行添加注释(7,cc)
"[count]<leader>cn 注释当前行或光标以下count行逐行添加注释(7,cn)
"[count]<leader>c<space> 切换单行或选中的行的注释状态
"[count]<leader>cu 光标以下count行逐行取消注释(7,cu)
"[count]<leader>cm 光标以下count行尝试添加块注释(7,cm)
"[count]<leader>ci 切换选中行的注释状态
"<leader>ca 在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//
"<leader>cs 以"性感"的方式注释
"<leader>cA 在当前行尾添加注释符，并进入Insert模式 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
"[count]<leader>cy 先复制选中部分或单行,然后再注释
"注：count参数可选，无则默认为选中行或当前行
" 让注释符与语句之间留一个空格
let g:NERDSpaceDelims=1
" 多行注释时样子更好看
let g:NERDCompactSexyComs=1
"}}}

Plugin 'terryma/vim-expand-region'
" 鼠标多重选择
Plugin 'terryma/vim-multiple-cursors'
" 搜索替换快速预览
Plugin 'osyo-manga/vim-over'
" 快速文件搜索, 类似于sublime中的command + p
Plugin 'kien/ctrlp.vim'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
" <cr> Open the selected file in the 'current' window if possible.
" <c-t> Open the selected file in a new 'tab'.
" <c-v> Open the selected file in a 'vertical' split.
" <c-x>, <c-cr>, <c-s> Open the selected file in a 'horizontal' split.
" <c-y> Create a new file and its parent directories.

" 快速到达指定位置插件
Plugin 'Lokaltog/vim-easymotion'

"Use ? to sane regexes"
nnoremap ? /\v
vnoremap ? /\v

" use / map to easymontion's global search
map / <Plug>(easymotion-sn)
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)
nmap s <Plug>(easymotion-s2)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
" With this option set, v will match both v and V, but V will match V only. Default: 0.
let g:EasyMotion_smartcase = 1

Plugin 'tmux-plugins/vim-tmux'
Plugin 'tmux-plugins/vim-tmux-focus-events'
" Plugin 'tpope/vim-obsession'

Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
set sessionoptions-=help
set sessionoptions-=options
let g:session_autosave = 'no'
let g:session_autoload = 'no'
" let g:session_autosave = 'yes'
" let g:session_autoload = 'yes'
" let g:session_default_to_last = 1

" Easily interact with tmux from vim.
" Plugin 'benmills/vimux'
" set tmux status line looks like vim-airline
" Plugin 'edkolev/tmuxline.vim'
