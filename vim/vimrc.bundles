set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" --> Vundle plugin
Plugin 'gmarik/Vundle.vim'

" --> Themes and views

" molokai colorscheme
Plugin 'tomasr/molokai'
"If you prefer the scheme to match the original monokai background color
let g:molokai_original = 1

" solarized colorscheme
Plugin 'altercation/vim-colors-solarized'
let g:solarized_termcolors=256

" --> smooth scroll
Plugin 'terryma/vim-smooth-scroll'
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<cr>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 14, 2)<cr>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 22, 4)<cr>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 24, 4)<cr>

" --> shows
" 自动补全引号, 括号等
Plugin 'Raimondi/delimitMate'

Plugin 'Yggdroot/indentLine'
let g:indentLine_char = '¦'
" Vim
let g:indentLine_color_term = 235
" GVim
let g:indentLine_color_gui = '#3a3a3a'
" let g:indentLine_color_gui = '#A4E57E'
" A Vim plugin for visually displaying indent levels in code
" Plugin 'nathanaelkane/vim-indent-guides'

Plugin 'ntpeters/vim-better-whitespace'
map <leader><space> :StripWhitespace<cr>

" trailingspace plugins {{{
" Plugin 'vim-scripts/CountJump'
" Plugin 'vim-scripts/ShowTrailingWhitespace'
" Plugin 'vim-scripts/JumpToTrailingWhitespace'
" Plugin 'vim-scripts/DeleteTrailingWhitespace'
" }}}

Plugin 'bling/vim-airline'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
" 命令行（在状态行下）的高度，默认为1(不显示状态栏)，这里是2
set laststatus=2
" Always show the tab bar
" set showtabline=2

" 设置在状态行显示的信息（包括文件类型和解码）
" buffer编号 | 文件路径及文件名 | modified状态 | 只读状态 | help | preview | 文件编码 | BOM | EOL | type | demical:hexadecimal | 列:行/总行 | 文件百分比 | 时 间
" set statusline=[%n]\ %F%m%r%h%w\ [%{&ff}]\ [%{(&fenc==\"\"?&enc:&fenc).(&bomb?\",BOM\":\"\")}]%{&eol?'':'\ [noeol]'}\ [TYPE=%Y]\ [\%03.3b:0x\%02.2B]\ [POS=%c:%l/%L][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}

" --> Langulage support
" vim-markdown {{{
" 自动对齐
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1
" }}}
Plugin 'leafgarland/typescript-vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'groenewege/vim-less'
Plugin 'smilekzs/vim-nfo'
Plugin 'evanmiller/nginx-vim-syntax'

Plugin 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
    \   'guifgs': ['darkorange3', 'seagreen3', 'firebrick', 'DarkOrchid3', 'firebrick3', 'SeaGreen3'],
    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta', 'brown', 'darkgray', 'darkgreen', 'darkcyan', 'darkred', 'darkmagenta', 'gray', 'red'],
    \   'operators': '_,_',
    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately': {
    \       '*': {},
    \       'tex': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \       },
    \       'lisp': {
    \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \       },
    \       'vim': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \       },
    \       'html': {
    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \       },
    \       'css': 0,
    \   }
    \}

" extended % matching for HTML, LaTeX, and many other languages
Plugin 'vim-scripts/matchit.zip'

Plugin 'jelera/vim-javascript-syntax'
Plugin 'pangloss/vim-javascript'
" disable auto fold when filetype javascript
" autocmd FileType javascript call JavaScriptFold()

" Write styles faster. Much faster.
" Plugin 'rstacruz/vim-hyperstyle'

" ap/vim-css-color # 不支持Vim74， 使用vim-colorsque 替代
Plugin 'Marslo/vim-coloresque'
" {{{{ emmet
Plugin 'mattn/emmet-vim'
let g:user_emmet_mode='i'  "enable all functions
" Enable just for html/css
let g:user_emmet_install_global = 0
" remap the default <C-Y> leader
" Note that the trailing , still needs to be entered
" so the new keymap would be `<C-Y>,`
let g:user_emmet_leader_key='<C-Y>'
autocmd FileType html,css EmmetInstall
" }}}

Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

" required by tobys/pdv
Plugin 'tobyS/vmustache'
" phpdoc generator,
" require tobys/pdv and SirVer/ultisnips
Plugin 'tobyS/pdv'
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
map <leader>doc :call pdv#DocumentWithSnip()<CR>

Plugin 'heavenshell/vim-jsdoc'
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_input_description = 1
let g:jsdoc_underscore_private = 1
let g:jsdoc_access_descriptions = 2
let g:jsdoc_allow_shorthand = 1

Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'

" --> Git support
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-fugitive'

" --> 快速搜索插件
" Plugin 'mileszs/ack.vim'
" Plugin 'rking/ag.vim' " install `ag` a.k.a `the_silver_searcher`
" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
Plugin 'dyng/ctrlsf.vim'
let g:ctrlsf_winsize='30%'
let g:ctrlsf_auto_close=0
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>
" In CtrlSF window:
" Enter - Open corresponding file of current line in the window which CtrlSF is launched from.
" t - Like Enter but open file in a new tab.
" p - Like Enter but open file in a preview window.
" O - Like Enter but always leave CtrlSF window opening.
" T - Lkie t but focus CtrlSF window instead of new opened tab.
" q - Quit CtrlSF window.
" <C-J> - Move cursor to next match.
" <C-K> - Move cursor to previous match.
" In preview window:
" q - Close preview window.

" {{{ NERDTree插件的快捷键
Plugin 'scrooloose/nerdtree'
" o.......打开文件目录或书签
" t.......在新的tab页中打开文件或书签
" i.......在split window中打开选择的文件
" s.......在vsplit window中打开选择的文件
" O.......Recursively open the selected directory
" x.......Close the current nodes parent
" X.......Recursively close all children of the current node
" e.......Edit the current dir
" D.......删除当前书签
" P.......返回根节点
" p.......返回当前节点父节点
" C.......进入相应目录
" u.......返回上一级目录
" cd......Change the CWD to the dir of the selected node
" CD......Change tree root to the CWD
" I.......切换隐藏文件是否显示
" B.......切换书签隐藏显示
" }}}
" {{{ NERDTreeTabsToggle
Plugin 'jistr/vim-nerdtree-tabs'
" 始终焦点位于文件窗口内
let g:nerdtree_tabs_smart_startup_focus=2
" 默认不显示NERDTree窗口
let g:nerdtree_tabs_open_on_gui_startup=0
nmap <leader>nt :NERDTreeTabsToggle<CR>
" }}}

" bugfix for using :bd close all buffer and vim when plugin NerdTree open {{{
" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
endif
let loaded_bclose = 1
if !exists('bclose_multiple')
  let bclose_multiple = 1
endif
" Display an error message.
function! s:Warn(msg)
  echohl ErrorMsg
  echomsg a:msg
  echohl NONE
endfunction
" Command ':Bclose' executes ':bd' to delete buffer in current window.
" The window will show the alternate buffer (Ctrl-^) if it exists,
" or the previous buffer (:bp), or a blank buffer if no previous.
" Command ':Bclose!' is the same, but executes ':bd!' (discard changes).
" An optional argument can specify which buffer to close (name or number).
function! s:Bclose(bang, buffer)
  if empty(a:buffer)
    let btarget = bufnr('%')
  elseif a:buffer =~ '^\d\+$'
    let btarget = bufnr(str2nr(a:buffer))
  else
    let btarget = bufnr(a:buffer)
  endif

  if btarget < 0
    call s:Warn('No matching buffer for '.a:buffer)
    return
  endif
  if empty(a:bang) && getbufvar(btarget, '&modified')
    call s:Warn('No write since last change for buffer '.btarget.' (use :Bclose!)')
    return
  endif
  " Numbers of windows that view target buffer which we will delete.
  let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
  if !g:bclose_multiple && len(wnums) > 1
    call s:Warn('Buffer is in multiple windows (use ":let bclose_multiple=1")')
    return
  endif
  let wcurrent = winnr()
  for w in wnums
    execute w.'wincmd w'
    let prevbuf = bufnr('#')
    if prevbuf > 0 && buflisted(prevbuf) && prevbuf != w
      buffer #
    else
      bprevious
    endif
    if btarget == bufnr('%')
      " Numbers of listed buffers which are not the target to be deleted.
      let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
      " Listed, not target, and not displayed.
      let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
      " Take the first buffer, if any (could be more intelligent).
      let bjump = (bhidden + blisted + [-1])[0]
      if bjump > 0
        execute 'buffer '.bjump
      else
        execute 'enew'.a:bang
      endif
    endif
  endfor
  execute 'bdelete'.a:bang.' '.btarget
  execute wcurrent.'wincmd w'
endfunction
command! -bang -complete=buffer -nargs=? Bclose call <SID>Bclose('<bang>', '<args>')
nnoremap <silent> <Leader>bd :Bclose<CR>
nnoremap <silent> <Leader>bD :Bclose!<CR>
cabbrev bd Bclose
cabbrev bD Bclose!
cabbrev bd! Bclose!
" bugfix end}}}

" {{{ plugin – NERD_commenter.vim   注释代码用的
Plugin 'scrooloose/nerdcommenter'
" [count]<leader>cc 注释当前行或光标以下count行逐行添加注释(7,cc)
" [count]<leader>cn 注释当前行或光标以下count行逐行添加注释(7,cn)
" [count]<leader>c<space> 切换单行或选中的行的注释状态
" [count]<leader>cu 光标以下count行逐行取消注释(7,cu)
" [count]<leader>cm 光标以下count行尝试添加块注释(7,cm)
" [count]<leader>ci 切换选中行的注释状态
" <leader>ca 在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//
" <leader>cs 以"性感"的方式注释
" <leader>cA 在当前行尾添加注释符，并进入Insert模式 在行尾插入 /* */,并且进入插入模式。 这个命令方便写注释。
" [count]<leader>cy 先复制选中部分或单行,然后再注释
" 注：count参数可选，无则默认为选中行或当前行
" 让注释符与语句之间留一个空格
let g:NERDSpaceDelims=1
" 多行注释时样子更好看
let g:NERDCompactSexyComs=1
" }}}

Plugin 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" 鼠标多重选择
Plugin 'terryma/vim-multiple-cursors'
" 搜索替换快速预览
Plugin 'osyo-manga/vim-over'
" 快速文件搜索, 类似于sublime中的command + p
Plugin 'kien/ctrlp.vim'
" create new file in current window
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
if executable('ag')
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let s:ctrlp_fallback = 'ag %s -i -l --nocolor --nogroup --hidden
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ --ignore "**/*.pyc"
    \ -g ""'
elseif executable('ack-grep')
  let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
elseif executable('ack')
  let g:ctrlp_use_caching = 0
  let s:ctrlp_fallback = 'ack %s --nocolor -f'
else
  let s:ctrlp_fallback = 'find %s -type f'
endif
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
    \ 'fallback': s:ctrlp_fallback
\ }
" <cr> Open the selected file in the 'current' window if possible.
" <c-t> Open the selected file in a new 'tab'.
" <c-v> Open the selected file in a 'vertical' split.
" <c-x>, <c-cr>, <c-s> Open the selected file in a 'horizontal' split.
" <c-y> Create a new file and its parent directories.

" 快速到达指定位置插件
Plugin 'Lokaltog/vim-easymotion'

" Use ? to sane regexes"
nnoremap ? /\v
vnoremap ? /\v

" use / map to easymontion's global search
map / <Plug>(easymotion-sn)
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)
nmap s <Plug>(easymotion-s2)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
" With this option set, v will match both v and V, but V will match V only. Default: 0.
let g:EasyMotion_smartcase = 1

Plugin 'tmux-plugins/vim-tmux'
Plugin 'tmux-plugins/vim-tmux-focus-events'
" Plugin 'tpope/vim-obsession'

Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
set sessionoptions-=help
set sessionoptions-=options
let g:session_autosave = 'no'
let g:session_autoload = 'no'
" let g:session_autosave = 'yes'
" let g:session_autoload = 'yes'
" let g:session_default_to_last = 1


" source YouCompleteMe plugin
if filereadable(expand("~/.vimrc.bundles.ycm"))
  source ~/.vimrc.bundles.ycm
endif

" If user have own plugins, load them here
if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call vundle#end()
