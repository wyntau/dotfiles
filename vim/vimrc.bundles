
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ==> Vundle plugin
Plugin 'gmarik/Vundle.vim'

" ==> Themes and views
Plugin 'tomasr/molokai'
  "If you prefer the scheme to match the original monokai background color
  let g:molokai_original = 1
Plugin 'altercation/vim-colors-solarized'
  let g:solarized_termcolors=256
Plugin 'morhetz/gruvbox'

" ==> vim-airline
Plugin 'bling/vim-airline'
  let g:airline#extensions#tabline#enabled = 1
  " Show just the filename
  " let g:airline#extensions#tabline#fnamemod = ':t'
  " 命令行（在状态行下）的高度，默认为1(不显示状态栏)，这里是2
  set laststatus=2
  " source vim-airline fonts
  if filereadable(expand("~/.vimrc.bundles.airline.fonts"))
    source ~/.vimrc.bundles.airline.fonts
  endif

" FocusGained and FocusLost autocommand events are not working in terminal vim.
" This plugin restores them when using vim inside Tmux.
Plugin 'tmux-plugins/vim-tmux-focus-events'

" ==> User Interface support
Plugin 'Yggdroot/indentLine'
  let g:indentLine_char = '¦'
  let g:indentLine_color_term = 239
  " background will auto set to light when some condition
  " so force color_term to 239
  " if &background ==# "light"
  "   let g:indentLine_color_term = 249
  " else
  "   let g:indentLine_color_term = 239
  " endif

Plugin 'ntpeters/vim-better-whitespace'
  map <leader><space> :StripWhitespace<cr>

" --> Git support
Plugin 'airblade/vim-gitgutter'
" default maps
" nmap [c <Plug>GitGutterPrevHunk
" nmap ]c <Plug>GitGutterNextHunk
" nmap <Leader>hs <Plug>GitGutterStageHunk
" nmap <Leader>hr <Plug>GitGutterRevertHunk
" nmap <Leader>hp <Plug>GitGutterPreviewHunk

" vim-tmux-navigator
Plugin 'christoomey/vim-tmux-navigator'
  " fix neovim C-h send backspace problem
  " you should run it in `normal terminal` and `tmux` separately
  " ```bash
  " infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
  " tic $TERM.ti
  " rm $TERM.ti
  " ```
  nnoremap <Tab> <C-w>w
  if has('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <silent> <C-h> <C-\><C-n>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-\><C-n>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-\><C-n>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-\><C-n>:TmuxNavigateRight<cr>
  end

" 自动补全引号, 括号等
Plugin 'Raimondi/delimitMate'

" 快速文件搜索, 类似于sublime中的command + p
" Plugin 'kien/ctrlp.vim'
Plugin 'ctrlpvim/ctrlp.vim'
  nnoremap <Leader>o :CtrlP<CR>
  nnoremap <Leader>i :CtrlPBuffer<CR>
  nnoremap <Leader>u :CtrlPMixed<CR>
  " create new file in current window
  let g:ctrlp_open_new_file = 'r'
  let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
      \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
      \ }
  if executable('ag')
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
    let s:ctrlp_fallback = 'ag %s -i -l --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'
  elseif executable('ack-grep')
    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
  elseif executable('ack')
    let g:ctrlp_use_caching = 0
    let s:ctrlp_fallback = 'ack %s --nocolor -f'
  else
    let s:ctrlp_fallback = 'find %s -type f'
  endif
  let g:ctrlp_user_command = {
      \ 'types': {
          \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
          \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': s:ctrlp_fallback
  \ }
  " <cr> Open the selected file in the 'current' window if possible.
  " <c-v> Open the selected file in a 'vertical' split.
  " <c-x>, <c-cr>, <c-s> Open the selected file in a 'horizontal' split.
  " <c-y> Create a new file and its parent directories.

Plugin 'godlygeek/tabular'

" --> smooth scroll
Plugin 'terryma/vim-smooth-scroll'
  noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<cr>
  noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 14, 2)<cr>
  noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 22, 4)<cr>
  noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 24, 4)<cr>

" extended % matching for HTML, LaTeX, and many other languages
Plugin 'vim-scripts/matchit.zip'

" Write styles faster. Much faster.
" Plugin 'rstacruz/vim-hyperstyle'

" {{{{ emmet
" default keymap is `<C-Y>,` (not <leader>, just comma `,')
Plugin 'mattn/emmet-vim'
  let g:user_emmet_mode='inv'

Plugin 'tpope/vim-surround'

Plugin 'tpope/vim-repeat'

" --> 快速搜索插件
" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
" require ag(a.k.a `the_silver_searcher`) or ack
Plugin 'dyng/ctrlsf.vim'
  let g:ctrlsf_winsize='30%'
  let g:ctrlsf_auto_close=0
  nmap     <C-F>f <Plug>CtrlSFPrompt
  vmap     <C-F>f <Plug>CtrlSFVwordPath
  vmap     <C-F>F <Plug>CtrlSFVwordExec
  nmap     <C-F>n <Plug>CtrlSFCwordPath
  nmap     <C-F>p <Plug>CtrlSFPwordPath
  nnoremap <C-F>o :CtrlSFOpen<CR>
  nnoremap <C-F>t :CtrlSFToggle<CR>
  inoremap <C-F>t <Esc>:CtrlSFToggle<CR>
  " In CtrlSF window:
  " Enter - Open corresponding file of current line in the window which CtrlSF is launched from.
  " t - Like Enter but open file in a new tab.
  " p - Like Enter but open file in a preview window.
  " O - Like Enter but always leave CtrlSF window opening.
  " T - Lkie t but focus CtrlSF window instead of new opened tab.
  " q - Quit CtrlSF window.
  " <C-J> - Move cursor to next match.
  " <C-K> - Move cursor to previous match.
  " In preview window:
  " q - Close preview window.

Plugin 'scrooloose/nerdtree'
  " o.......打开文件目录或书签
  " t.......在新的tab页中打开文件或书签
  " i.......在split window中打开选择的文件
  " s.......在vsplit window中打开选择的文件
  " O.......Recursively open the selected directory
  " x.......Close the current nodes parent
  " X.......Recursively close all children of the current node
  " e.......Edit the current dir
  " D.......删除当前书签
  " P.......返回根节点
  " p.......返回当前节点父节点
  " C.......进入相应目录
  " u.......返回上一级目录
  " cd......Change the CWD to the dir of the selected node
  " CD......Change tree root to the CWD
  " I.......切换隐藏文件是否显示
  " B.......切换书签隐藏显示
  " }}}
" {{{ NERDTreeTabsToggle
Plugin 'jistr/vim-nerdtree-tabs'
  " 始终焦点位于文件窗口内
  let g:nerdtree_tabs_smart_startup_focus=2
  " 默认不显示NERDTree窗口
  let g:nerdtree_tabs_open_on_gui_startup=0
  nmap <leader>nt :NERDTreeTabsToggle<CR>
  " }}}

Plugin 'scrooloose/nerdcommenter'
  " 让注释符与语句之间留一个空格
  let g:NERDSpaceDelims=1
  " 多行注释时样子更好看
  let g:NERDCompactSexyComs=1

Plugin 'terryma/vim-expand-region'
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)

" 鼠标多重选择
Plugin 'terryma/vim-multiple-cursors'

" 搜索替换快速预览
Plugin 'osyo-manga/vim-over'

" 快速到达指定位置插件
Plugin 'Lokaltog/vim-easymotion'
  let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
  " With this option set, v will match both v and V, but V will match V only. Default: 0.
  let g:EasyMotion_smartcase = 1
  " use / map to easymontion's global search
  map / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)
  nmap s <Plug>(easymotion-s2)

" Plugin 'justinmk/vim-sneak'
" Plugin 'haya14busa/incsearch.vim'

" ==> filetype and language syntax support
" avoid confict with extends tabular
" Plugin 'godlygeek/tabular', {'name': 'vim-markdown-tabular'}
" vim-markdown depends on godlygeek/tabular, but we load it before
Plugin 'plasticboy/vim-markdown'
  let g:vim_markdown_folding_disabled=1
Plugin 'leafgarland/typescript-vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'groenewege/vim-less'
Plugin 'smilekzs/vim-nfo'
Plugin 'evanmiller/nginx-vim-syntax'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'pangloss/vim-javascript'
" ap/vim-css-color # 不支持Vim74， 使用vim-colorsque 替代
Plugin 'Marslo/vim-coloresque'

" source snippets plugin
if filereadable(expand("~/.vimrc.bundles.snippets"))
  source ~/.vimrc.bundles.snippets
endif

" source YouCompleteMe plugin
if filereadable(expand("~/.vimrc.bundles.ycm"))
  source ~/.vimrc.bundles.ycm
endif

" If user have own plugins, load them here
if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call vundle#end()
