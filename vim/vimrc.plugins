
call plug#begin('~/.vim/plugins')

" =============================================================================
" Common plugins
" =============================================================================

" ==> Themes and views
Plug 'tomasr/molokai'
  "If you prefer the scheme to match the original monokai background color
  let g:molokai_original = 1
Plug 'altercation/vim-colors-solarized'
  let g:solarized_termcolors = 256
Plug 'morhetz/gruvbox'
Plug 'junegunn/seoul256.vim'
  " seoul256 (dark):
  "   Range:   233 (darkest) ~ 239 (lightest)
  "   Default: 237
  " seoul256 (light):
  "   Range:   252 (darkest) ~ 256 (lightest)
  "   Default: 253

Plug 'CodeFalling/fcitx-vim-osx'

" ==> vim-airline
Plug 'bling/vim-airline'
  " set airline to use powerline symbols
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  " Show just the filename
  " let g:airline#extensions#tabline#fnamemod = ':t'
  " 命令行（在状态行下）的高度，默认为1(不显示状态栏)，这里是2
  set laststatus=2

" ==> Git support
Plug 'airblade/vim-gitgutter'
" default maps
" nmap [c <Plug>GitGutterPrevHunk
" nmap ]c <Plug>GitGutterNextHunk
" nmap <Leader>hs <Plug>GitGutterStageHunk
" nmap <Leader>hr <Plug>GitGutterRevertHunk
" nmap <Leader>hp <Plug>GitGutterPreviewHunk
" Plug 'jreybert/vimagit'

" ==> User Interface support
Plug 'Yggdroot/indentLine'
  let g:indentLine_char = '¦'
  let g:indentLine_color_term = 237
  " background will auto set to light when some condition
  " so force color_term to 239
  " if &background ==# "light"
  "   let g:indentLine_color_term = 249
  " else
  "   let g:indentLine_color_term = 239
  " endif

" ==> tmux support
Plug 'tmux-plugins/vim-tmux'
" FocusGained and FocusLost autocommand events are not working in terminal vim.
" This plugin restores them when using vim inside Tmux.
Plug 'tmux-plugins/vim-tmux-focus-events'
" vim-tmux-navigator
Plug 'christoomey/vim-tmux-navigator'
  " fix neovim C-h send backspace problem
  " you should run it in `normal terminal` and `tmux` separately
  " ```bash
  " infocmp $TERM | sed 's/kbs=^[hH]/kbs=\\177/' > $TERM.ti
  " tic $TERM.ti
  " rm $TERM.ti
  " ```
  nnoremap <Tab> <C-w>w
  if has('nvim')
    tnoremap <Esc> <C-\><C-n>
    tnoremap <silent> <C-h> <C-\><C-n>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-\><C-n>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-\><C-n>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-\><C-n>:TmuxNavigateRight<cr>
  end
  " Window resizing mappings {{{
  nnoremap <silent> <S-Up> 5<c-w>+<CR>
  nnoremap <silent> <S-Down> 5<c-w>-<CR>
  nnoremap <silent> <S-Left> 5<c-w><<CR>
  nnoremap <silent> <S-Right> 5<c-w>><CR>
  " }}}

Plug 'schickling/vim-bufonly'
  nnoremap <Leader>bo :Bufonly<CR>

" ==> 快速文件搜索, 类似于sublime中的command + p
" Plug 'kien/ctrlp.vim'
Plug 'ctrlpvim/ctrlp.vim'
  nnoremap <Leader>o :CtrlP<CR>
  nnoremap <Leader>i :CtrlPBuffer<CR>
  nnoremap <Leader>u :CtrlPMixed<CR>
  " create new file in current window
  let g:ctrlp_open_new_file = 'r'
  let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
      \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
      \ }
  if executable('ag')
    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
    let s:ctrlp_fallback = 'ag %s -i -l --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore node_modules
      \ --ignore bower_components
      \ --ignore "**/*.pyc"
      \ -g ""'
  elseif executable('ack-grep')
    let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
  elseif executable('ack')
    let g:ctrlp_use_caching = 0
    let s:ctrlp_fallback = 'ack %s --nocolor -f'
  else
    let s:ctrlp_fallback = 'find %s -type f'
  endif
  let g:ctrlp_user_command = {
      \ 'types': {
          \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
          \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': s:ctrlp_fallback
  \ }
  " <cr> Open the selected file in the 'current' window if possible.
  " <c-v> Open the selected file in a 'vertical' split.
  " <c-x>, <c-cr>, <c-s> Open the selected file in a 'horizontal' split.
  " <c-y> Create a new file and its parent directories.
Plug 'tacahiroy/ctrlp-funky'
  nnoremap <Leader>r :CtrlPFunky<CR>

Plug 'scrooloose/nerdtree'
  " o.......打开文件目录或书签
  " t.......在新的tab页中打开文件或书签
  " i.......在split window中打开选择的文件
  " s.......在vsplit window中打开选择的文件
  " O.......Recursively open the selected directory
  " x.......Close the current nodes parent
  " X.......Recursively close all children of the current node
  " e.......Edit the current dir
  " D.......删除当前书签
  " P.......返回根节点
  " p.......返回当前节点父节点
  " C.......进入相应目录
  " u.......返回上一级目录
  " cd......Change the CWD to the dir of the selected node
  " CD......Change tree root to the CWD
  " I.......切换隐藏文件是否显示
  " B.......切换书签隐藏显示
  " }}}
Plug 'Xuyuanp/nerdtree-git-plugin'
" {{{ NERDTreeTabsToggle
Plug 'jistr/vim-nerdtree-tabs'
  " 始终焦点位于文件窗口内
  let g:nerdtree_tabs_smart_startup_focus = 2
  " 默认不显示NERDTree窗口
  let g:nerdtree_tabs_open_on_gui_startup = 0
  nmap <leader>nt :NERDTreeTabsToggle<CR>
  " }}}

" ==> 快速搜索插件
" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
" require ag(a.k.a `the_silver_searcher`) or ack
Plug 'dyng/ctrlsf.vim'
  let g:ctrlsf_winsize = '30%'
  let g:ctrlsf_auto_close = 0
  nmap     <C-S>f <Plug>CtrlSFPrompt
  vmap     <C-S>f <Plug>CtrlSFVwordPath
  vmap     <C-S>F <Plug>CtrlSFVwordExec
  nmap     <C-S>n <Plug>CtrlSFCwordPath
  nmap     <C-S>p <Plug>CtrlSFPwordPath
  nnoremap <C-S>o :CtrlSFOpen<CR>
  nnoremap <C-S>t :CtrlSFToggle<CR>
  inoremap <C-S>t <Esc>:CtrlSFToggle<CR>
  " In CtrlSF window:
  " Enter - Open corresponding file of current line in the window which CtrlSF is launched from.
  " t - Like Enter but open file in a new tab.
  " p - Like Enter but open file in a preview window.
  " O - Like Enter but always leave CtrlSF window opening.
  " T - Lkie t but focus CtrlSF window instead of new opened tab.
  " q - Quit CtrlSF window.
  " <C-J> - Move cursor to next match.
  " <C-K> - Move cursor to previous match.
  " In preview window:
  " q - Close preview window.

" 快速到达指定位置插件
Plug 'Lokaltog/vim-easymotion'
  let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
  " With this option set, v will match both v and V, but V will match V only. Default: 0.
  let g:EasyMotion_smartcase = 1
  " use / map to easymontion's global search
  map / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)
  nmap s <Plug>(easymotion-s2)
" Plug 'justinmk/vim-sneak'
" Plug 'haya14busa/incsearch.vim'

Plug 'terryma/vim-expand-region'
  vmap v <Plug>(expand_region_expand)
  vmap <C-v> <Plug>(expand_region_shrink)

Plug 't9md/vim-textmanip'
  xmap <Space>d <Plug>(textmanip-duplicate-down)
  nmap <Space>d <Plug>(textmanip-duplicate-down)
  xmap <Space>D <Plug>(textmanip-duplicate-up)
  nmap <Space>D <Plug>(textmanip-duplicate-up)

  xmap <C-j> <Plug>(textmanip-move-down)
  xmap <C-k> <Plug>(textmanip-move-up)
  xmap <C-h> <Plug>(textmanip-move-left)
  xmap <C-l> <Plug>(textmanip-move-right)

  " toggle insert/replace with <F10>
  nmap <F10> <Plug>(textmanip-toggle-mode)
  xmap <F10> <Plug>(textmanip-toggle-mode)

Plug 't9md/vim-choosewin'
  " if you want to use overlay feature
  let g:choosewin_overlay_enable = 1
  " invoke with '-'
  nmap - <Plug>(choosewin)
  " Key Action  Description
  " ; win_land  Navigate to current window
  " - previous  Naviage to previous window
  " s swap  Swap windows #1
  " S swap_stay Swap windows but stay #1

" ==> Trailing whitespace
Plug 'ntpeters/vim-better-whitespace'
  map <leader><space> :StripWhitespace<cr>

" ==> 自动补全引号, 括号等
Plug 'Raimondi/delimitMate'
  let g:delimitMate_expand_cr = 1
  let g:delimitMate_expand_space = 1

Plug 'godlygeek/tabular'
  nmap <Leader>a& :Tabularize /&<CR>
  vmap <Leader>a& :Tabularize /&<CR>
  nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
  vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
  nmap <Leader>a=> :Tabularize /=><CR>
  vmap <Leader>a=> :Tabularize /=><CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a,, :Tabularize /,\zs<CR>
  vmap <Leader>a,, :Tabularize /,\zs<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

Plug 'tpope/vim-surround'

Plug 'tpope/vim-repeat'

Plug 'scrooloose/nerdcommenter'
  " 让注释符与语句之间留一个空格
  let g:NERDSpaceDelims = 1
  " 多行注释时样子更好看
  let g:NERDCompactSexyComs = 1

" 鼠标多重选择
Plug 'terryma/vim-multiple-cursors'

" 搜索替换快速预览
Plug 'osyo-manga/vim-over'

" =============================================================================
" Filetype specific plugins
" =============================================================================

" ==> extended % matching for HTML, LaTeX, and many other languages
Plug 'vim-scripts/matchit.zip'

" Write styles faster. Much faster.
" Plug 'rstacruz/vim-hyperstyle'

" {{{{ emmet
" default keymap is `<C-Y>,` (not <leader>, just comma `,')
Plug 'mattn/emmet-vim'
  let g:user_emmet_mode='inv'

" ==> filetype and language syntax support
" avoid confict with extends tabular
" Plug 'godlygeek/tabular', {'name': 'vim-markdown-tabular'}
" vim-markdown depends on godlygeek/tabular, but we load it before
Plug 'plasticboy/vim-markdown'
  let g:vim_markdown_folding_disabled = 1

Plug 'leafgarland/typescript-vim'

Plug 'kchmck/vim-coffee-script'

Plug 'groenewege/vim-less'

Plug 'hail2u/vim-css3-syntax'
augroup VimCSS3Syntax
  autocmd!
  autocmd FileType css setlocal iskeyword+=-
augroup END

" ap/vim-css-color # 不支持Vim74， 使用vim-colorsque 替代
Plug 'Marslo/vim-coloresque', {'for': ['css', 'less', 'scss']}

Plug 'smilekzs/vim-nfo'

Plug 'evanmiller/nginx-vim-syntax'

Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

" javascript ES6 support, only enable this in pure javascript files,
Plug 'othree/yajs.vim', {'for': ['javascript', 'javascript.jsx']}

" source fzf plugin
if filereadable(expand("~/.vimrc.plugins.fzf"))
  source ~/.vimrc.plugins.fzf
endif

" source matchtag plugin
if filereadable(expand("~/.vimrc.plugins.matchtag"))
  source ~/.vimrc.plugins.matchtag
endif

" source snippets plugin
if filereadable(expand("~/.vimrc.plugins.snippets"))
  source ~/.vimrc.plugins.snippets
endif

" source YouCompleteMe plugin
if filereadable(expand("~/.vimrc.plugins.ycm"))
  source ~/.vimrc.plugins.ycm
endif

" If user have own plugins, load them here
if filereadable(expand("~/.vimrc.plugins.local"))
  source ~/.vimrc.plugins.local
endif

call plug#end()
